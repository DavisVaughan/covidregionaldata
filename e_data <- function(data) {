summarise                package:dplyr                 R Documentation

_S_u_m_m_a_r_i_s_e _e_a_c_h _g_r_o_u_p _t_o _f_e_w_e_r _r_o_w_s

_D_e_s_c_r_i_p_t_i_o_n:

     ‘summarise()’ creates a new data frame. It will have one (or more)
     rows for each combination of grouping variables; if there are no
     grouping variables, the output will have a single row summarising
     all observations in the input. It will contain one column for each
     grouping variable and one column for each of the summary
     statistics that you have specified.

     ‘summarise()’ and ‘summarize()’ are synonyms.

_U_s_a_g_e:

     summarise(.data, ..., .groups = NULL)
     
     summarize(.data, ..., .groups = NULL)
     
_A_r_g_u_m_e_n_t_s:

   .data: A data frame, data frame extension (e.g. a tibble), or a lazy
          data frame (e.g. from dbplyr or dtplyr). See _Methods_,
          below, for more details.

     ...: <‘data-masking’> Name-value pairs of summary functions. The
          name will be the name of the variable in the result.

          The value can be:

            • A vector of length 1, e.g. ‘min(x)’, ‘n()’, or
              ‘sum(is.na(y))’.

            • A vector of length ‘n’, e.g. ‘quantile()’.

            • A data frame, to add multiple columns from a single
              expression.

 .groups: *Experimental* Grouping structure of the result.

            • "drop_last": dropping the last level of grouping. This
              was the only supported option before version 1.0.0.

            • "drop": All levels of grouping are dropped.

            • "keep": Same grouping structure as ‘.data’.

            • "rowwise": Each row is its own group.

          When ‘.groups’ is not specified, it is chosen based on the
          number of rows of the results:

            • If all the results have 1 row, you get "drop_last".

            • If the number of rows varies, you get "keep".

          In addition, a message informs you of that choice, unless the
          result is ungrouped, the option "dplyr.summarise.inform" is
          set to ‘FALSE’, or when ‘summarise()’ is called from a
          function in a package.

_V_a_l_u_e:

     An object _usually_ of the same type as ‘.data’.

        • The rows come from the underlying ‘group_keys()’.

        • The columns are a combination of the grouping keys and the
          summary expressions that you provide.

        • The grouping structure is controlled by the .groups=
          argument, the output may be another grouped_df, a tibble or a
          rowwise data frame.

        • Data frame attributes are *not* preserved, because
          ‘summarise()’ fundamentally creates a new data frame.

_U_s_e_f_u_l _f_u_n_c_t_i_o_n_s:

        • Center: ‘mean()’, ‘median()’

        • Spread: ‘sd()’, ‘IQR()’, ‘mad()’

        • Range: ‘min()’, ‘max()’, ‘quantile()’

        • Position: ‘first()’, ‘last()’, ‘nth()’,

        • Count: ‘n()’, ‘n_distinct()’

        • Logical: ‘any()’, ‘all()’

_B_a_c_k_e_n_d _v_a_r_i_a_t_i_o_n_s:

     The data frame backend supports creating a variable and using it
     in the same summary. This means that previously created summary
     variables can be further transformed or combined within the
     summary, as in ‘mutate()’. However, it also means that summary
     variables with the same names as previous variables overwrite
     them, making those variables unavailable to later summary
     variables.

     This behaviour may not be supported in other backends. To avoid
     unexpected results, consider using new names for your summary
     variables, especially when creating multiple summaries.

_M_e_t_h_o_d_s:

     This function is a *generic*, which means that packages can
     provide implementations (methods) for other classes. See the
     documentation of individual methods for extra arguments and
     differences in behaviour.

     The following methods are currently available in loaded packages:
     dplyr (‘data.frame’, ‘grouped_df’, ‘rowwise_df’).

_S_e_e _A_l_s_o:

     Other single table verbs: ‘arrange()’, ‘filter()’, ‘mutate()’,
     ‘rename()’, ‘select()’, ‘slice()’

_E_x_a_m_p_l_e_s:

     # A summary applied to ungrouped tbl returns a single row
     mtcars %>%
       summarise(mean = mean(disp), n = n())
     
     # Usually, you'll want to group first
     mtcars %>%
       group_by(cyl) %>%
       summarise(mean = mean(disp), n = n())
     
     # dplyr 1.0.0 allows to summarise to more than one value:
     mtcars %>%
        group_by(cyl) %>%
        summarise(qs = quantile(disp, c(0.25, 0.75)), prob = c(0.25, 0.75))
     
     # You use a data frame to create multiple columns so you can wrap
     # this up into a function:
     my_quantile <- function(x, probs) {
       tibble(x = quantile(x, probs), probs = probs)
     }
     mtcars %>%
       group_by(cyl) %>%
       summarise(my_quantile(disp, c(0.25, 0.75)))
     
     # Each summary call removes one grouping level (since that group
     # is now just a single row)
     mtcars %>%
       group_by(cyl, vs) %>%
       summarise(cyl_n = n()) %>%
       group_vars()
     
     # BEWARE: reusing variables may lead to unexpected results
     mtcars %>%
       group_by(cyl) %>%
       summarise(disp = mean(disp), sd = sd(disp))
     
     # Refer to column names stored as strings with the `.data` pronoun:
     var <- "mass"
     summarise(starwars, avg = mean(.data[[var]], na.rm = TRUE))
     # Learn more in ?dplyr_data_masking
     

